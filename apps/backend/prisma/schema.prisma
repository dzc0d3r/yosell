// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum SubscriptionTier {
  bronze
  silver
  gold
  diamond
}

enum VerificationStatus {
  unverified
  pending
  verified
}

enum OrderStatus {
  new
  confirmed
  shipped
  delivered
  failed_delivery
  returned
}

enum DeliveryProvider {
  yalidine
  maestro
  other
}

enum RiskLevel {
  low
  medium
  high
}

// --- MODELS ---

model User {
  id                         String             @id @default(cuid())
  fullname                   String?            // RENAMED from 'name'
  phoneNumber                String?            @unique // ADDED and marked as unique 
  phoneVerified              DateTime?          // ADDED for Alpha version feature
  email                      String             @unique 
  emailVerified              DateTime?
  image                      String?
  hashedPassword             String?
  subscriptionTier           SubscriptionTier   @default(bronze)
  trustScore                 Int                @default(70)
  businessVerificationStatus VerificationStatus @default(unverified)
  yalidineApiKey             String?
  maestroApiKey              String?
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt

  accounts Account[]
  products Product[]
  orders   Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                   String    @id @default(cuid())
  name                 String
  description          String?
  price                Decimal   @db.Decimal(10, 2)
  images               Json?
  stockQuantity        Int       @default(0)
  landingPageSubdomain String?   @unique
  landingPageTheme     String    @default("crimson")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Order {
  id                   String           @id @default(cuid())
  buyerName            String
  buyerPhone           String
  buyerAddressWilaya   String
  buyerAddressCommune  String
  buyerAddressStreet   String?
  status               OrderStatus      @default(new)
  deliveryProvider     DeliveryProvider?
  trackingNumber       String?
  deliverySlipUrl      String?
  buyerRiskScore       Int              @default(0)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
  sellerId  String
  seller    User    @relation(fields: [sellerId], references: [id])
  review    Review?
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model BuyerProfile {
  id                      String    @id @default(cuid())
  failedDeliveryCount     Int       @default(0)
  successfulDeliveryCount Int       @default(0)
  riskLevel               RiskLevel @default(low)
}
